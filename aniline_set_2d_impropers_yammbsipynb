{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8780e5e5-da17-44fd-aa2e-65cbe4246894",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from openff.toolkit import Molecule\n",
    "from qcelemental.models import Molecule, DriverEnum\n",
    "from qcelemental.models.common_models import Model\n",
    "from qcelemental.models.procedures import OptimizationSpecification, QCInputSpecification, TDKeywords, TorsionDriveInput\n",
    "from qcengine import compute_procedure\n",
    "from openff.toolkit.topology import Molecule, Topology\n",
    "from openff.toolkit.typing.engines.smirnoff import ForceField"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3054e17c-e3bc-45e8-8f2c-8b75db9361ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PortalClient(server_name='The MolSSI OpenFF QCFractal Server', address='https://api.qcarchive.molssi.org/', username='None')\n"
     ]
    }
   ],
   "source": [
    "import qcportal as ptl\n",
    "import json\n",
    "from collections import defaultdict\n",
    "\n",
    "client = ptl.PortalClient(\"https://api.qcarchive.molssi.org/\")\n",
    "print(client)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3e46c1c2-2d45-48db-9f2d-59a9319b20f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_energy_contour(x, y, z, metadata, vmin, vmax, cmap='viridis'):\n",
    "    import numpy as np\n",
    "    import seaborn as sns\n",
    "    from scipy.interpolate import griddata\n",
    "    import matplotlib.pyplot as plt\n",
    "    plt.rcParams['font.size'] = 22\n",
    "    # Assuming x, y, z are 1D arrays of the same length\n",
    "    # Create a grid for x and y\n",
    "    xi = np.linspace(x.min(), x.max(), 100)\n",
    "    yi = np.linspace(y.min(), y.max(), 100)\n",
    "    X, Y = np.meshgrid(xi, yi)\n",
    "    \n",
    "    # Interpolate z values on the grid\n",
    "    Z = griddata((x, y), z, (X, Y), method='cubic')\n",
    "    print(Z.shape)\n",
    "    min_Z = np.min(Z)\n",
    "    Z = Z - min_Z\n",
    "    \n",
    "    # Create a contour plot\n",
    "    plt.figure(figsize=(10, 8))\n",
    "    contour_plot = plt.contourf(X, Y, Z, cmap=cmap, vmin=vmin, vmax=vmax)\n",
    "    \n",
    "    # Add color bar\n",
    "    cbar = plt.colorbar(contour_plot)\n",
    "    cbar.set_label('Energy in kcal/mol', rotation=270)\n",
    "    \n",
    "    # Set the colorbar range\n",
    "    plt.clim(vmin, vmax)\n",
    "    # Add labels and title\n",
    "    plt.title(metadata['title'])\n",
    "    plt.xlabel(metadata['xlabel'])\n",
    "    plt.ylabel(metadata['ylabel'])\n",
    "    \n",
    "    # Show plot\n",
    "    plt.show()\n",
    "\n",
    "def get_assigned_torsion_param(molecule, forcefield, central_bond_atoms):\n",
    "    \"\"\"\n",
    "    for a molecule and specific dihedral check the assigned torsion parameter\n",
    "    Parameters\n",
    "    ----------\n",
    "    molecule: openforcefield molecule object\n",
    "    ff: ForceField offxml file\n",
    "    central_bond_atoms: list of atom indices of central bond in the dihedral\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    parameter.id: str of the torsion parameter associated with the dihedral\n",
    "    \"\"\"\n",
    "    if isinstance(forcefield, str):\n",
    "        forcefield = ForceField(forcefield)\n",
    "    topology = Topology.from_molecules([molecule])\n",
    "    # Run the molecule labeling\n",
    "    molecule_force_list = forcefield.label_molecules(topology)\n",
    "    \n",
    "    torsion_params = []\n",
    "    # Print out a formatted description of the parameters applied to this molecule\n",
    "    for mol_idx, mol_forces in enumerate(molecule_force_list):\n",
    "        for force_tag, force_dict in mol_forces.items():\n",
    "            if force_tag == \"ProperTorsions\":\n",
    "                for (atom_indices, parameter) in force_dict.items():\n",
    "                    if (atom_indices[1], atom_indices[2]) == tuple(central_bond_atoms) or tuple(\n",
    "                        reversed(atom_indices)\n",
    "                    ) == tuple(central_bond_atoms):\n",
    "                        print(parameter.smirks, atom_indices, parameter.id)\n",
    "                        torsion_params.append([parameter.smirks, atom_indices, parameter.id])\n",
    "    return torsion_params\n",
    "\n",
    "def show_oemol_struc(oemol, torsions=False, atom_indices=[]):\n",
    "    \"\"\"\n",
    "    Returns the oedepict image with or without the torsion highlighted\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    oemol: openeye oechem mol object\n",
    "    torsions: boolean, to highlight dihedrals\n",
    "    atom_indices: dihedral atom indices to highlight\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    Image: image in png format\n",
    "    \"\"\"\n",
    "    from IPython.display import Image\n",
    "    from openeye import oechem, oedepict\n",
    "\n",
    "    width = 450\n",
    "    height = 400\n",
    "\n",
    "    # Highlight element of interest\n",
    "    class NoAtom(oechem.OEUnaryAtomPred):\n",
    "        def __call__(self, atom):\n",
    "            return False\n",
    "\n",
    "    class AtomInTorsion(oechem.OEUnaryAtomPred):\n",
    "        def __call__(self, atom):\n",
    "            return atom.GetIdx() in atom_indices\n",
    "\n",
    "    class NoBond(oechem.OEUnaryBondPred):\n",
    "        def __call__(self, bond):\n",
    "            return False\n",
    "\n",
    "    class BondInTorsion(oechem.OEUnaryBondPred):\n",
    "        def __call__(self, bond):\n",
    "            return (bond.GetBgn().GetIdx() in atom_indices) and (\n",
    "                bond.GetEnd().GetIdx() in atom_indices\n",
    "            )\n",
    "\n",
    "    class CentralBondInTorsion(oechem.OEUnaryBondPred):\n",
    "        def __call__(self, bond):\n",
    "            return (bond.GetBgn().GetIdx() in atom_indices[1:3]) and (\n",
    "                bond.GetEnd().GetIdx() in atom_indices[1:3]\n",
    "            )\n",
    "\n",
    "    opts = oedepict.OE2DMolDisplayOptions(width, height, oedepict.OEScale_AutoScale)\n",
    "    opts.SetAtomPropertyFunctor(oedepict.OEDisplayAtomIdx())\n",
    "    oedepict.OEPrepareDepiction(oemol)\n",
    "    img = oedepict.OEImage(width, height)\n",
    "    display = oedepict.OE2DMolDisplay(oemol, opts)\n",
    "    if torsions:\n",
    "        atoms = oemol.GetAtoms(AtomInTorsion())\n",
    "        bonds = oemol.GetBonds(NoBond())\n",
    "        abset = oechem.OEAtomBondSet(atoms, bonds)\n",
    "        oedepict.OEAddHighlighting(\n",
    "            display,\n",
    "            oechem.OEColor(oechem.OEYellow),\n",
    "            oedepict.OEHighlightStyle_BallAndStick,\n",
    "            abset,\n",
    "        )\n",
    "\n",
    "    oedepict.OERenderMolecule(img, display)\n",
    "    png = oedepict.OEWriteImageToString(\"png\", img)\n",
    "    return Image(png)\n",
    "\n",
    "def return_td_result(ff_name, qcmol, dihedral_metadata):\n",
    "    result = compute_procedure(\n",
    "    input_data=TorsionDriveInput(\n",
    "        keywords=dihedral_metadata,\n",
    "        input_specification=QCInputSpecification(\n",
    "            driver=DriverEnum.gradient,\n",
    "            model=Model(method=ff_name, basis='smirnoff')\n",
    "        ),\n",
    "        initial_molecule=[qcmol,],\n",
    "        optimization_spec=OptimizationSpecification(\n",
    "            procedure=\"geomeTRIC\",\n",
    "            keywords={\n",
    "                \"coordsys\": \"dlc\",\n",
    "                \"maxiter\": 300,\n",
    "                \"program\": \"openmm\",\n",
    "            }\n",
    "        )\n",
    "    ),\n",
    "    procedure=\"torsiondrive\"\n",
    ")\n",
    "    energies = list(result.final_energies.values())\n",
    "    min_ener = min(energies)\n",
    "    energies = [(it-min_ener) * 627.5094740630558 for it in energies]\n",
    "    angles = list(result.final_energies.keys())\n",
    "    # angles = [int(it) for it in angles]\n",
    "    # angles, energies = zip(*sorted(zip(angles, energies)))\n",
    "    return result, angles, energies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d460f5ff-74af-43cf-bfa7-3030fd7e71dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = client.get_dataset(\"TorsionDrive\", \"OpenFF Aniline 2D Impropers v1.0\")\n",
    "specifications = [\"default\"]  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0138408f-fb64-41f0-a40e-9f01bd65ad15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'default': {<RecordStatusEnum.complete: 'complete'>: 12,\n",
       "  <RecordStatusEnum.error: 'error'>: 12}}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.status()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca15700e-e67b-445a-9785-298cd9b94943",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "(100, 100)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for entry_name in ds.entry_names:\n",
    "    entry = ds.get_entry(entry_name)\n",
    "    rec = ds.get_record(entry_name=entry_name, specification_name='default')\n",
    "    if rec.status == 'complete':\n",
    "        mol = Molecule.from_mapped_smiles(entry.attributes['canonical_isomeric_explicit_hydrogen_mapped_smiles'])\n",
    "        display(show_oemol_struc(mol.to_openeye(), torsions=True, atom_indices=[3, 7, 4, 16, 15]))\n",
    "        x = []\n",
    "        y = []\n",
    "        z = []\n",
    "        for key, value in rec.final_energies.items():\n",
    "            x.append(key[0])\n",
    "            y.append(key[1])\n",
    "            z.append(value)\n",
    "        \n",
    "        x = np.array(x)\n",
    "        y = np.array(y)\n",
    "        z = np.array(z) * 627.509\n",
    "        min_z = min(z)\n",
    "        z = z - min_z\n",
    "        print(min(z))\n",
    "        metadata = {}\n",
    "        if rec.status == 'error':\n",
    "            metadata['title'] = f'(Partial data) 2D Improper scan of {entry.attributes[\"molecular_formula\"]}'\n",
    "        else:\n",
    "            metadata['title'] = f'QM PES of 2D Improper and proper dihedral scan of {entry.attributes[\"molecular_formula\"]}'\n",
    "        metadata['xlabel'] = f'Improper angle {entry.additional_keywords[\"dihedrals\"][0]} in deg. '\n",
    "        metadata['ylabel'] = f'Proper angle {entry.additional_keywords[\"dihedrals\"][1]} in deg.'\n",
    "        plot_energy_contour(x,y,z, metadata, vmin=0, vmax=14)\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ffd83d51-d5c5-4c68-8ede-b8c8098fbed6",
   "metadata": {},
   "outputs": [],
   "source": [
    "qcmol = rec.initial_molecules[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5c3e04d9-1be7-44c0-8167-deeec954eb39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dihedrals': [[7, 4, 16, 15], [3, 4, 7, 15]],\n",
       " 'grid_spacing': [6, 30],\n",
       " 'dihedral_ranges': [[-54, 54], [-150, 180]],\n",
       " 'energy_upper_limit': 0.05,\n",
       " 'energy_decrease_thresh': None}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "entry.additional_keywords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "07698dfc-f3f0-4b09-9a0f-073e05f7bd03",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"Cannot find a registered parameter handler class for tag 'HarmonicHeight'\\nKnown parameter handler class tags are dict_keys(['Constraints', 'Bonds', 'Angles', 'ProperTorsions', 'ImproperTorsions', 'GBSA', 'vdW', 'Electrostatics', 'LibraryCharges', 'ToolkitAM1BCC', 'ChargeIncrementModel', 'VirtualSites'])\"",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/torsiondrive/lib/python3.12/site-packages/openff/toolkit/typing/engines/smirnoff/forcefield.py:1350\u001b[39m, in \u001b[36mForceField._get_parameter_handler_class\u001b[39m\u001b[34m(self, tagname)\u001b[39m\n\u001b[32m   1349\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1350\u001b[39m     ph_class = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_parameter_handler_classes\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtagname\u001b[49m\u001b[43m]\u001b[49m\n\u001b[32m   1351\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "\u001b[31mKeyError\u001b[39m: 'HarmonicHeight'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[9]\u001b[39m\u001b[32m, line 5\u001b[39m\n\u001b[32m      2\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mopenff\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mtoolkit\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m ForceField, Molecule\n\u001b[32m      4\u001b[39m molecule1 = Molecule.from_smiles(\u001b[33m'\u001b[39m\u001b[33mc1ccccc1\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m----> \u001b[39m\u001b[32m5\u001b[39m smirnoff = \u001b[43mSMIRNOFFTemplateGenerator\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmolecules\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmolecule1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mforcefield\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mharmonic_final-force-field.offxml\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      6\u001b[39m \u001b[38;5;28mprint\u001b[39m(SMIRNOFFTemplateGenerator.INSTALLED_FORCEFIELDS)\n\u001b[32m      8\u001b[39m ff_name=\u001b[33m'\u001b[39m\u001b[33m/mnt/c/Data/User/Evien/UCI/Research/Mobley_Lab/Linux/smee/harmonic_final-force-field.offxml\u001b[39m\u001b[33m'\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/torsiondrive/lib/python3.12/site-packages/openmmforcefields/generators/template_generators.py:1438\u001b[39m, in \u001b[36mSMIRNOFFTemplateGenerator.__init__\u001b[39m\u001b[34m(self, molecules, cache, forcefield, **kwargs)\u001b[39m\n\u001b[32m   1434\u001b[39m available_force_fields = openff.toolkit.typing.engines.smirnoff.get_available_force_fields()\n\u001b[32m   1435\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m (filename := forcefield + \u001b[33m\"\u001b[39m\u001b[33m.offxml\u001b[39m\u001b[33m\"\u001b[39m) \u001b[38;5;129;01min\u001b[39;00m available_force_fields \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[32m   1436\u001b[39m     filename := forcefield\n\u001b[32m   1437\u001b[39m ) \u001b[38;5;129;01min\u001b[39;00m available_force_fields:\n\u001b[32m-> \u001b[39m\u001b[32m1438\u001b[39m     \u001b[38;5;28mself\u001b[39m._smirnoff_forcefield = \u001b[43mopenff\u001b[49m\u001b[43m.\u001b[49m\u001b[43mtoolkit\u001b[49m\u001b[43m.\u001b[49m\u001b[43mtyping\u001b[49m\u001b[43m.\u001b[49m\u001b[43mengines\u001b[49m\u001b[43m.\u001b[49m\u001b[43msmirnoff\u001b[49m\u001b[43m.\u001b[49m\u001b[43mForceField\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1440\u001b[39m \u001b[38;5;66;03m# just try parsing the input and let openff handle the error\u001b[39;00m\n\u001b[32m   1441\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   1442\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/torsiondrive/lib/python3.12/site-packages/openff/toolkit/typing/engines/smirnoff/forcefield.py:342\u001b[39m, in \u001b[36mForceField.__init__\u001b[39m\u001b[34m(self, aromaticity_model, parameter_handler_classes, parameter_io_handler_classes, disable_version_check, allow_cosmetic_attributes, load_plugins, *sources)\u001b[39m\n\u001b[32m    339\u001b[39m \u001b[38;5;28mself\u001b[39m._register_parameter_io_handler_classes(parameter_io_handler_classes)\n\u001b[32m    341\u001b[39m \u001b[38;5;66;03m# Parse all sources containing SMIRNOFF parameter definitions\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m342\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mparse_sources\u001b[49m\u001b[43m(\u001b[49m\u001b[43msources\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mallow_cosmetic_attributes\u001b[49m\u001b[43m=\u001b[49m\u001b[43mallow_cosmetic_attributes\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/torsiondrive/lib/python3.12/site-packages/openff/toolkit/typing/engines/smirnoff/forcefield.py:805\u001b[39m, in \u001b[36mForceField.parse_sources\u001b[39m\u001b[34m(self, sources, allow_cosmetic_attributes)\u001b[39m\n\u001b[32m    803\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m source \u001b[38;5;129;01min\u001b[39;00m sources:\n\u001b[32m    804\u001b[39m     smirnoff_data = \u001b[38;5;28mself\u001b[39m.parse_smirnoff_from_source(source)\n\u001b[32m--> \u001b[39m\u001b[32m805\u001b[39m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_load_smirnoff_data\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    806\u001b[39m \u001b[43m        \u001b[49m\u001b[43msmirnoff_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mallow_cosmetic_attributes\u001b[49m\u001b[43m=\u001b[49m\u001b[43mallow_cosmetic_attributes\u001b[49m\n\u001b[32m    807\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/torsiondrive/lib/python3.12/site-packages/openff/toolkit/typing/engines/smirnoff/forcefield.py:951\u001b[39m, in \u001b[36mForceField._load_smirnoff_data\u001b[39m\u001b[34m(self, smirnoff_data, allow_cosmetic_attributes)\u001b[39m\n\u001b[32m    944\u001b[39m section_dict = smirnoff_data[\u001b[33m\"\u001b[39m\u001b[33mSMIRNOFF\u001b[39m\u001b[33m\"\u001b[39m][parameter_name]\n\u001b[32m    946\u001b[39m \u001b[38;5;66;03m# TODO: Implement a ParameterHandler.from_dict() that knows how to deserialize itself for extensibility.\u001b[39;00m\n\u001b[32m    947\u001b[39m \u001b[38;5;66;03m#       We could let it load the ParameterTypes from the dict and append them to the existing handler\u001b[39;00m\n\u001b[32m    948\u001b[39m \u001b[38;5;66;03m#       after verifying that they are compatible.\u001b[39;00m\n\u001b[32m    949\u001b[39m \n\u001b[32m    950\u001b[39m \u001b[38;5;66;03m# Get the parameter types serialization that is not passed to the ParameterHandler constructor.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m951\u001b[39m ph_class = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_get_parameter_handler_class\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparameter_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    952\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    953\u001b[39m     infotype = ph_class._INFOTYPE\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/miniconda3/envs/torsiondrive/lib/python3.12/site-packages/openff/toolkit/typing/engines/smirnoff/forcefield.py:1354\u001b[39m, in \u001b[36mForceField._get_parameter_handler_class\u001b[39m\u001b[34m(self, tagname)\u001b[39m\n\u001b[32m   1352\u001b[39m     msg = \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mCannot find a registered parameter handler class for tag \u001b[39m\u001b[33m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtagname\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m'\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m   1353\u001b[39m     msg += \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mKnown parameter handler class tags are \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m._parameter_handler_classes.keys()\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m-> \u001b[39m\u001b[32m1354\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(msg)\n\u001b[32m   1355\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m ph_class\n",
      "\u001b[31mKeyError\u001b[39m: \"Cannot find a registered parameter handler class for tag 'HarmonicHeight'\\nKnown parameter handler class tags are dict_keys(['Constraints', 'Bonds', 'Angles', 'ProperTorsions', 'ImproperTorsions', 'GBSA', 'vdW', 'Electrostatics', 'LibraryCharges', 'ToolkitAM1BCC', 'ChargeIncrementModel', 'VirtualSites'])\""
     ]
    }
   ],
   "source": [
    "\n",
    "import logging\n",
    "from collections.abc import Generator\n",
    "from multiprocessing import Pool\n",
    "\n",
    "from numpy.typing import NDArray\n",
    "from pydantic import Field\n",
    "from tqdm import tqdm\n",
    "\n",
    "from yammbs._base.array import Array\n",
    "from yammbs._base.base import ImmutableModel\n",
    "from yammbs._minimize import _lazy_load_force_field\n",
    "\n",
    "LOGGER = logging.getLogger(__name__)\n",
    "\n",
    "\n",
    "class ConstrainedMinimizationInput(ImmutableModel):\n",
    "    # This is more like a \"TorsionDrive\" ID than a molecule ID,\n",
    "    # but it's how the database is currently structured.\n",
    "    molecule_id: int = Field(\n",
    "        ...,\n",
    "        description=\"The identifier of the molecule\",\n",
    "    )\n",
    "    mapped_smiles: str = Field(\n",
    "        ...,\n",
    "        description=\"The SMILES of the molecule\",\n",
    "    )\n",
    "    dihedral_indices: tuple[int, int, int, int] = Field(\n",
    "        ...,\n",
    "        description=\"The indices of the atoms which define the driven dihedral angle\",\n",
    "    )\n",
    "    force_field: str = Field(\n",
    "        ...,\n",
    "        description=\"And identifier of the force field to use for the minimization\",\n",
    "    )\n",
    "    coordinates: Array = Field(\n",
    "        ...,\n",
    "        description=\"The coordinates [Angstrom] of this conformer with shape=(n_atoms, 3).\",\n",
    "    )\n",
    "    grid_id: float = Field(\n",
    "        ...,\n",
    "        description=\"The grid identifier of the torsion scan point.\",\n",
    "    )\n",
    "\n",
    "\n",
    "class ConstrainedMinimizationResult(ConstrainedMinimizationInput):\n",
    "    energy: float = Field(\n",
    "        ...,\n",
    "        description=\"Minimized energy in kcal/mol\",\n",
    "    )\n",
    "\n",
    "\n",
    "def _minimize_torsions(\n",
    "    data: Generator[\n",
    "        tuple[\n",
    "            int,\n",
    "            str,\n",
    "            tuple[int, int, int, int],\n",
    "            float,\n",
    "            NDArray,\n",
    "            float,\n",
    "        ],\n",
    "        None,\n",
    "        None,\n",
    "    ],\n",
    "    force_field: str,\n",
    "    n_processes: int = 2,\n",
    "    chunksize=32,\n",
    ") -> Generator[ConstrainedMinimizationResult, None, None]:\n",
    "    LOGGER.info(\"Mapping `data` generator into `inputs` generator\")\n",
    "\n",
    "    # It'd be smoother to skip this tranformation - just pass this generator\n",
    "    # from inside of TorsionStore\n",
    "    inputs: Generator[ConstrainedMinimizationInput, None, None] = (\n",
    "        ConstrainedMinimizationInput(\n",
    "            molecule_id=molecule_id,\n",
    "            mapped_smiles=mapped_smiles,\n",
    "            dihedral_indices=dihedral_indices,\n",
    "            force_field=force_field,\n",
    "            coordinates=coordinates,\n",
    "            grid_id=grid_id,\n",
    "        )\n",
    "        for (molecule_id, mapped_smiles, dihedral_indices, grid_id, coordinates, _) in data\n",
    "    )\n",
    "\n",
    "    LOGGER.info(\"Setting up multiprocessing pool with generator (of unknown length)\")\n",
    "\n",
    "    # TODO: It'd be nice to have the `total` argument passed through, but that would require using\n",
    "    #       a list-like iterable instead of a generator, which might cause problems at scale\n",
    "    with Pool(processes=n_processes) as pool:\n",
    "        for val in tqdm(\n",
    "            pool.imap(\n",
    "                _minimize_constrained,\n",
    "                inputs,\n",
    "                chunksize=chunksize,\n",
    "            ),\n",
    "            desc=f\"Building and minimizing systems with {force_field}\",\n",
    "        ):\n",
    "            if val is not None:\n",
    "                yield val\n",
    "\n",
    "\n",
    "class ConstrainedMinimizationError(Exception):\n",
    "    \"\"\"The constrained minimization failed.\"\"\"\n",
    "\n",
    "    pass\n",
    "\n",
    "\n",
    "def _minimize_constrained(\n",
    "    input: ConstrainedMinimizationInput,\n",
    ") -> ConstrainedMinimizationResult:\n",
    "    \"\"\"Taken from openff-strike-team 10/31/24.\n",
    "\n",
    "    https://github.com/lilyminium/openff-strike-team/blob/a6ccd2821ed627064529f5c4a22b47c1fa36efe2/torsions/datasets/mm/minimize-torsion-constrained.py#L35-L106\n",
    "    \"\"\"\n",
    "    import openmm\n",
    "    import openmm.unit\n",
    "    from openff.interchange.operations.minimize import _DEFAULT_ENERGY_MINIMIZATION_TOLERANCE\n",
    "    from openff.toolkit import Molecule, Quantity\n",
    "\n",
    "    LOGGER.debug(f\"Setting up constrained minimization for {input.dict()=}\")\n",
    "\n",
    "    # TODO: Pass this through\n",
    "    restrain_k = 1.0\n",
    "\n",
    "    # TODO: GAFF/Espaloma/local file/plugin force fields\n",
    "\n",
    "    LOGGER.debug(f\"Loading force field {input.force_field=}\")\n",
    "    force_field = _lazy_load_force_field(input.force_field)\n",
    "\n",
    "    # if this force field is constrained, this will be the H-* constraint ...\n",
    "    try:\n",
    "        assert \"tip3p\" not in force_field[\"Constraints\"].parameters[0].id\n",
    "    except (KeyError, AssertionError):\n",
    "        pass\n",
    "\n",
    "    LOGGER.debug(f\"Creating molecule, with conformer, from {input.mapped_smiles=}\")\n",
    "    molecule = Molecule.from_mapped_smiles(input.mapped_smiles, allow_undefined_stereo=True)\n",
    "    molecule.add_conformer(Quantity(input.coordinates, \"angstrom\"))\n",
    "\n",
    "    LOGGER.debug(\"Creating interchange object\")\n",
    "    interchange = force_field.create_interchange(molecule.to_topology())\n",
    "\n",
    "    restraint_force = openmm.CustomExternalForce(\"0.5*k*((x-x0)^2+(y-y0)^2+(z-z0)^2)\")\n",
    "    restraint_force.addGlobalParameter(\n",
    "        \"k\",\n",
    "        restrain_k * openmm.unit.kilocalorie_per_mole / openmm.unit.angstrom**2,\n",
    "    )\n",
    "    for parameter in (\"x0\", \"y0\", \"z0\"):\n",
    "        restraint_force.addPerParticleParameter(parameter)\n",
    "\n",
    "    atom_indices = list(range(len(molecule.atoms)))\n",
    "    atom_indices = sorted(set(atom_indices))  # - set([index - 0 for index in input.dihedral_indices]))\n",
    "\n",
    "    # switch to nm now... just in case\n",
    "    positions = interchange.positions.to(\"nanometer\")\n",
    "\n",
    "    LOGGER.debug(f\"Adding restraint to particles not in {input.dihedral_indices=}\")\n",
    "    for atom_index in range(molecule.n_atoms):\n",
    "        if atom_index in input.dihedral_indices:\n",
    "            continue\n",
    "\n",
    "        particle_index = restraint_force.addParticle(atom_index)\n",
    "        restraint_force.setParticleParameters(\n",
    "            particle_index,\n",
    "            atom_index,\n",
    "            [x.to_openmm() for x in positions[atom_index]],\n",
    "        )\n",
    "\n",
    "    LOGGER.debug(\"Creating openmm.app.Simulation object\")\n",
    "    simulation = interchange.to_openmm_simulation(\n",
    "        openmm.LangevinMiddleIntegrator(\n",
    "            293.15 * openmm.unit.kelvin,\n",
    "            1.0 / openmm.unit.picosecond,\n",
    "            2.0 * openmm.unit.femtosecond,\n",
    "        ),\n",
    "        combine_nonbonded_forces=True,\n",
    "        additional_forces=[restraint_force],\n",
    "    )\n",
    "\n",
    "    simulation.context.computeVirtualSites()\n",
    "\n",
    "    for index in input.dihedral_indices:\n",
    "        simulation.system.setParticleMass(index, 0.0)\n",
    "\n",
    "    LOGGER.debug(\"Trying to minimize energy\")\n",
    "    try:\n",
    "        simulation.minimizeEnergy(\n",
    "            tolerance=_DEFAULT_ENERGY_MINIMIZATION_TOLERANCE.to_openmm(),\n",
    "            maxIterations=10_000,\n",
    "        )\n",
    "    except Exception as e:\n",
    "        LOGGER.error(\n",
    "            {\n",
    "                index: simulation.system.getParticleMass(index)._value\n",
    "                for index in range(simulation.system.getNumParticles())\n",
    "            },\n",
    "        )\n",
    "        LOGGER.error(input.dihedral_indices, input.mapped_smiles)\n",
    "\n",
    "        raise ConstrainedMinimizationError(\"Minimization failed, see logger\") from e\n",
    "\n",
    "    LOGGER.debug(\"Returning result\")\n",
    "    return ConstrainedMinimizationResult(\n",
    "        molecule_id=input.molecule_id,\n",
    "        mapped_smiles=input.mapped_smiles,\n",
    "        dihedral_indices=input.dihedral_indices,\n",
    "        force_field=input.force_field,\n",
    "        coordinates=simulation.context.getState(getPositions=True)\n",
    "        .getPositions(asNumpy=True)\n",
    "        .value_in_unit(openmm.unit.angstrom)[: interchange.positions.shape[0], :],\n",
    "        energy=simulation.context.getState(\n",
    "            getEnergy=True,\n",
    "        )\n",
    "        .getPotentialEnergy()\n",
    "        .value_in_unit(\n",
    "            openmm.unit.kilocalorie_per_mole,\n",
    "        ),\n",
    "        grid_id=input.grid_id,\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0ebec4f-3148-449a-a115-98fdaa2717d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = []\n",
    "y = []\n",
    "z = []\n",
    "for i,j in zip(angles,energies):\n",
    "    ang = i.split(',')\n",
    "    x.append(int(ang[0]))\n",
    "    y.append(int(ang[1]))\n",
    "    z.append(j)\n",
    "\n",
    "entry = ds.get_entry(entry_name)\n",
    "rec = ds.get_record(entry_name=entry_name, specification_name='default')\n",
    "mol = Molecule.from_mapped_smiles(entry.attributes['canonical_isomeric_explicit_hydrogen_mapped_smiles'])\n",
    "display(mol.visualize(backend='openeye'))\n",
    "\n",
    "x = np.array(x)\n",
    "y = np.array(y)\n",
    "z = np.array(z)\n",
    "metadata = {}\n",
    "if rec.status == 'error':\n",
    "    metadata['title'] = f'(Partial data) 2D Improper scan of {entry.attributes['molecular_formula']}'\n",
    "else:\n",
    "    metadata['title'] = f'MM PES of 2D Improper and proper dihedral scan of {entry.attributes['molecular_formula']}'\n",
    "metadata['xlabel'] = f'Improper angle {entry.additional_keywords['dihedrals'][0]} in deg.'\n",
    "metadata['ylabel'] = f'Proper angle {entry.additional_keywords['dihedrals'][1]} in deg.'\n",
    "plot_energy_contour(x,y,z, metadata, vmin=0, vmax=14)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23d76448-a750-46d2-b014-e29a0b00bff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('improper_and_proper_2D_scan_MM.json', 'w') as output:\n",
    "    output.write(result.json())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "692d28fa-3422-458c-9349-a1b6df9eeeed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e140fe67-3549-4608-b0ea-1f8b399f1bdf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
